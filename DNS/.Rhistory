arima.forecast <- forecast(arima.fit, 12)
plot(arima.forecast, type = "l", main = paste("Прогноз:", main_text))
abline(h = axTicks(2), col="gray", lty="dashed")
abline(v = axTicks(1), col="gray", lty="dashed")
#Соединим линией реальные продажи с прогнозными
f.dates <- c(tail(as.numeric(time(sales.ts)), 1), head(as.numeric(time(arima.forecast$mean)), 1))
f.sales <- c(tail(as.numeric(sales.ts), 1), head(as.numeric(arima.forecast$mean), 1))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l")
f.dates <- c(as.numeric(time(sales.ts)), as.numeric(time(arima.forecast$mean)))
f.sales <- c(as.numeric(sales.ts), as.numeric(arima.forecast$mean))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l", lty="dashed", col=palette()[2])
#И добавим линию тренда
model <- lm(as.numeric(f.sales) ~ as.numeric(f.dates))
abline(model, col = "green")
#Добавим линию тренда на продажи + прогноз
legend("topleft",
c("Real", "Trend line", "lowess"),
col=c("black","green", "red"),
lty=c("solid","solid","dashed"),
lwd=2,
cex=1)
#И в конце рисуем общую информацию по магазину
plot(stl(sales.ts, s.window = "periodic"))
mtext(paste(main_text, ": ", ylab_text, sep=""),side=3,outer=F, cex=1, line=2, adj=0.5)
print(paste(names(shops)[i],": Done!", sep=""))
}
legend("topleft",
c("Real", "Trend line", "lowess", "Forecast"),
col=c("black","green", "red", "blue"),
lty=c("solid","solid","dashed", "solid"),
lwd=2,
cex=1)
for(i in 1:length(shops)) {
plot(sales_monthly_zoo[[i]], main = names(shops)[i], cex=1, xlab=NA, ylab="Продажи (тыс.р)", type="l", col="gray", las=2)
# Добавляем линию тренда
model <- lm(as.numeric(sales_monthly_zoo[[i]]) ~ index(sales_monthly_zoo[[i]]))
abline(model, col = "green")
#Добавляем сглаженную ЛР для данных о продажах
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, index(sales_monthly_zoo[[i]])), col="red")
#И описание диаграммы
legend("topleft", c("Продажи", "Тренд", "Сглаженные"),
col=c("gray","green","red"),
lty=c("solid","solid","solid"),
cex=1)
#в случае если у нас есть 2а года продаж и больше добавляем дополнительную информацию
if (length(sales_monthly_zoo[[i]]) >= 24) {
plot(stl(sales_monthly[[i]], s.window = "periodic"))
}
}
dev.off()
for(i in 1:length(shops)) {
plot(sales_monthly_zoo[[i]], main = names(shops)[i], cex=1, xlab=NA, ylab="Продажи (тыс.р)", type="l", col="gray", las=2)
# Добавляем линию тренда
model <- lm(as.numeric(sales_monthly_zoo[[i]]) ~ index(sales_monthly_zoo[[i]]))
abline(model, col = "green")
#Добавляем сглаженную ЛР для данных о продажах
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, index(sales_monthly_zoo[[i]])), col="red")
#И описание диаграммы
legend("topleft", c("Продажи", "Тренд", "Сглаженные"),
col=c("gray","green","red"),
lty=c("solid","solid","solid"),
cex=1)
#в случае если у нас есть 2а года продаж и больше добавляем дополнительную информацию
if (length(sales_monthly_zoo[[i]]) >= 24) {
plot(stl(sales_monthly[[i]], s.window = "periodic"))
}
}
#Нормализуем все продажи и выводим на экран
for (i in 1:length(sales_monthly_zoo)) {
s <- scale(sales_monthly_zoo[[i]])
if (i == 1) {
plot(s, col=palette()[i], main="Нормализованые продажи по всем магазинам", ylab="Продажи", xlab="Время")
} else {
lines(s, col=palette()[i])
}
s <- tail(s, 12)
s <- sqrt(s^2)
print(sum(s))
}
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
cex=0.75)
################################
##  тестируем на реальных     ##
##  данных                    ##
################################
# Запомним временную серию первого магазина, т.к. они больше всего похожи на продажи СПБ магазинов
msk_restored <- head(sales_monthly_zoo[[1]], -9)
plot(msk_restored)
start.date <- as.numeric(unlist(strsplit(as.character(start(sales_monthly_zoo[[1]])), "-"))[c(1,2)])
#Тут будем выводить данные о продажах и прогнозы
for(i in 1:length(shops)) {
print(paste(names(shops)[i],": Start...", sep=""))
main_text <- paste("Магазин", names(sales_monthly)[i])
xlab_text <- "Время"
ylab_text <- "Продажи в рублях"
#Берем группировку по неделям
#cut_weekly <- weekly_windows(sales_daily[[i]], end_date = as.Date(tail(index(sales_daily[[i]]),1)) - days_shift, as_ts = TRUE)
if (length(sales_monthly[[i]]) == 9) {
a <- c(as.numeric(msk_restored), as.numeric(sales_monthly[[i]]))
sales.ts <- ts(a, frequency = 12, start = start.date)
} else {
sales.ts <- sales_monthly[[i]]
}
#Здесь тестируем модели и выбираем подходящую
#auto.arima.fit <- auto.arima(sales_monthly$клин, trace=TRUE,
#parallel=TRUE, num.cores=8,
#max.order=50000,
#ic="aic",
#stationary=FALSE, seasonal=TRUE,
#stepwise=FALSE,
#max.d=3, max.D=3,
#max.P=3, max.Q=3,
#max.p=5, max.q=5)
#auto.arima.forecast <- forecast(auto.arima.fit, 12)
#plot(auto.arima.forecast, type = "l")
#lines(fitted(auto.arima.forecast), col = "green")
#arima.fit <- arima(sales_monthly$электрозавод, order=c(1,0,1), seasonal = c(1,1,0))
#summary(arima.fit)
#arima.forecast <- forecast(arima.fit, 12)
#plot(arima.forecast, type = "l")
#grid()
#lines(fitted(arima.forecast), col = "green")
dates <- as.Date(format(time(as.xts(sales.ts)), "%Y-%m-%d"))
total <- as.numeric(sales.ts)
#общая картина по продажам
plot(dates, total,
main = main_text, sub = NULL, xlab = xlab_text, ylab = ylab_text,
type="l", col=palette()[1])
lines(dates, lowess(total)$y, type="l", lty="dashed", col=palette()[2])
#Добавляем линии для решетки
abline(h = axTicks(2),col="gray", lty="dashed")
abline(v = dates[seq(3, length(dates), 4)],col="gray", lty="dashed")
model <- lm(as.numeric(total) ~ as.numeric(dates))
abline(model, col = "green")
legend("topleft",
c("Real", "Trend line", "lowess"),
col=c("black","green", "red"),
lty=c("solid","solid","dashed"),
lwd=2,
cex=1)
#Custom ARIMA
#sales.monthly <- ts(sales_monthly_zoo[[i]], start=as.numeric(unlist(strsplit(strtrim(start(sales_monthly_zoo[[i]]),7),"-"))), frequency = 12)
#tsdisplay(sales.monthly)
arima.fit <- arima(sales.ts, order=c(1,0,1), seasonal = c(1,1,0))
#summary(arima.fit)
arima.forecast <- forecast(arima.fit, 12)
plot(arima.forecast, type = "l", main = paste("Прогноз:", main_text))
abline(h = axTicks(2), col="gray", lty="dashed")
abline(v = axTicks(1), col="gray", lty="dashed")
#Соединим линией реальные продажи с прогнозными
f.dates <- c(tail(as.numeric(time(sales.ts)), 1), head(as.numeric(time(arima.forecast$mean)), 1))
f.sales <- c(tail(as.numeric(sales.ts), 1), head(as.numeric(arima.forecast$mean), 1))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l")
f.dates <- c(as.numeric(time(sales.ts)), as.numeric(time(arima.forecast$mean)))
f.sales <- c(as.numeric(sales.ts), as.numeric(arima.forecast$mean))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l", lty="dashed", col=palette()[2])
#И добавим линию тренда
model <- lm(as.numeric(f.sales) ~ as.numeric(f.dates))
abline(model, col = "green")
#Добавим линию тренда на продажи + прогноз
legend("topleft",
c("Real", "Trend line", "lowess", "Forecast"),
col=c("black","green", "red", "blue"),
lty=c("solid","solid","dashed", "solid"),
lwd=2,
cex=1)
#И в конце рисуем общую информацию по магазину
plot(stl(sales.ts, s.window = "periodic"))
mtext(paste(main_text, ": ", ylab_text, sep=""),side=3,outer=F, cex=1, line=2, adj=0.5)
print(paste(names(shops)[i],": Done!", sep=""))
}
pdf("forecasts.pdf", family="NimbusSan", encoding = "CP1251.enc")
#Нормализуем все продажи и выводим на экран
for (i in 1:length(sales_monthly_zoo)) {
s <- scale(sales_monthly_zoo[[i]])
if (i == 1) {
plot(s, col=palette()[i], main="Нормализованые продажи по всем магазинам", ylab="Продажи", xlab="Время")
} else {
lines(s, col=palette()[i])
}
s <- tail(s, 12)
s <- sqrt(s^2)
print(sum(s))
}
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
cex=0.75)
################################
##  тестируем на реальных     ##
##  данных                    ##
################################
# Запомним временную серию первого магазина, т.к. они больше всего похожи на продажи СПБ магазинов
msk_restored <- head(sales_monthly_zoo[[1]], -9)
plot(msk_restored)
start.date <- as.numeric(unlist(strsplit(as.character(start(sales_monthly_zoo[[1]])), "-"))[c(1,2)])
#Тут будем выводить данные о продажах и прогнозы
for(i in 1:length(shops)) {
print(paste(names(shops)[i],": Start...", sep=""))
main_text <- paste("Магазин", names(sales_monthly)[i])
xlab_text <- "Время"
ylab_text <- "Продажи в рублях"
#Берем группировку по неделям
#cut_weekly <- weekly_windows(sales_daily[[i]], end_date = as.Date(tail(index(sales_daily[[i]]),1)) - days_shift, as_ts = TRUE)
if (length(sales_monthly[[i]]) == 9) {
a <- c(as.numeric(msk_restored), as.numeric(sales_monthly[[i]]))
sales.ts <- ts(a, frequency = 12, start = start.date)
} else {
sales.ts <- sales_monthly[[i]]
}
#Здесь тестируем модели и выбираем подходящую
#auto.arima.fit <- auto.arima(sales_monthly$клин, trace=TRUE,
#parallel=TRUE, num.cores=8,
#max.order=50000,
#ic="aic",
#stationary=FALSE, seasonal=TRUE,
#stepwise=FALSE,
#max.d=3, max.D=3,
#max.P=3, max.Q=3,
#max.p=5, max.q=5)
#auto.arima.forecast <- forecast(auto.arima.fit, 12)
#plot(auto.arima.forecast, type = "l")
#lines(fitted(auto.arima.forecast), col = "green")
#arima.fit <- arima(sales_monthly$электрозавод, order=c(1,0,1), seasonal = c(1,1,0))
#summary(arima.fit)
#arima.forecast <- forecast(arima.fit, 12)
#plot(arima.forecast, type = "l")
#grid()
#lines(fitted(arima.forecast), col = "green")
dates <- as.Date(format(time(as.xts(sales.ts)), "%Y-%m-%d"))
total <- as.numeric(sales.ts)
#общая картина по продажам
plot(dates, total,
main = main_text, sub = NULL, xlab = xlab_text, ylab = ylab_text,
type="l", col=palette()[1])
lines(dates, lowess(total)$y, type="l", lty="dashed", col=palette()[2])
#Добавляем линии для решетки
abline(h = axTicks(2),col="gray", lty="dashed")
abline(v = dates[seq(3, length(dates), 4)],col="gray", lty="dashed")
model <- lm(as.numeric(total) ~ as.numeric(dates))
abline(model, col = "green")
legend("topleft",
c("Real", "Trend line", "lowess"),
col=c("black","green", "red"),
lty=c("solid","solid","dashed"),
lwd=2,
cex=1)
#Custom ARIMA
#sales.monthly <- ts(sales_monthly_zoo[[i]], start=as.numeric(unlist(strsplit(strtrim(start(sales_monthly_zoo[[i]]),7),"-"))), frequency = 12)
#tsdisplay(sales.monthly)
arima.fit <- arima(sales.ts, order=c(1,0,1), seasonal = c(1,1,0))
#summary(arima.fit)
arima.forecast <- forecast(arima.fit, 12)
plot(arima.forecast, type = "l", main = paste("Прогноз:", main_text))
abline(h = axTicks(2), col="gray", lty="dashed")
abline(v = axTicks(1), col="gray", lty="dashed")
#Соединим линией реальные продажи с прогнозными
f.dates <- c(tail(as.numeric(time(sales.ts)), 1), head(as.numeric(time(arima.forecast$mean)), 1))
f.sales <- c(tail(as.numeric(sales.ts), 1), head(as.numeric(arima.forecast$mean), 1))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l")
f.dates <- c(as.numeric(time(sales.ts)), as.numeric(time(arima.forecast$mean)))
f.sales <- c(as.numeric(sales.ts), as.numeric(arima.forecast$mean))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l", lty="dashed", col=palette()[2])
#И добавим линию тренда
model <- lm(as.numeric(f.sales) ~ as.numeric(f.dates))
abline(model, col = "green")
#Добавим линию тренда на продажи + прогноз
legend("topleft",
c("Real", "Trend line", "lowess", "Forecast"),
col=c("black","green", "red", "blue"),
lty=c("solid","solid","dashed", "solid"),
lwd=2,
cex=1)
#И в конце рисуем общую информацию по магазину
plot(stl(sales.ts, s.window = "periodic"))
mtext(paste(main_text, ": ", ylab_text, sep=""),side=3,outer=F, cex=1, line=2, adj=0.5)
print(paste(names(shops)[i],": Done!", sep=""))
}
dev.off()
embedFonts("forecasts.pdf")
pdf("forecasts.pdf", family="NimbusSan", encoding = "CP1251.enc")
#Нормализуем все продажи и выводим на экран
for (i in 1:length(sales_monthly_zoo)) {
s <- scale(sales_monthly_zoo[[i]])
if (i == 1) {
plot(s, col=palette()[i], main="Нормализованые продажи по всем магазинам", ylab="Продажи", xlab="Время")
} else {
lines(s, col=palette()[i])
}
s <- tail(s, 12)
s <- sqrt(s^2)
print(sum(s))
}
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
cex=0.75)
################################
##  тестируем на реальных     ##
##  данных                    ##
################################
# Запомним временную серию первого магазина, т.к. они больше всего похожи на продажи СПБ магазинов
msk_restored <- head(sales_monthly_zoo[[1]], -9)
start.date <- as.numeric(unlist(strsplit(as.character(start(sales_monthly_zoo[[1]])), "-"))[c(1,2)])
#Тут будем выводить данные о продажах и прогнозы
for(i in 1:length(shops)) {
print(paste(names(shops)[i],": Start...", sep=""))
main_text <- paste("Магазин", names(sales_monthly)[i])
xlab_text <- "Время"
ylab_text <- "Продажи в рублях"
#Берем группировку по неделям
#cut_weekly <- weekly_windows(sales_daily[[i]], end_date = as.Date(tail(index(sales_daily[[i]]),1)) - days_shift, as_ts = TRUE)
if (length(sales_monthly[[i]]) == 9) {
a <- c(as.numeric(msk_restored), as.numeric(sales_monthly[[i]]))
sales.ts <- ts(a, frequency = 12, start = start.date)
} else {
sales.ts <- sales_monthly[[i]]
}
#Здесь тестируем модели и выбираем подходящую
#auto.arima.fit <- auto.arima(sales_monthly$клин, trace=TRUE,
#parallel=TRUE, num.cores=8,
#max.order=50000,
#ic="aic",
#stationary=FALSE, seasonal=TRUE,
#stepwise=FALSE,
#max.d=3, max.D=3,
#max.P=3, max.Q=3,
#max.p=5, max.q=5)
#auto.arima.forecast <- forecast(auto.arima.fit, 12)
#plot(auto.arima.forecast, type = "l")
#lines(fitted(auto.arima.forecast), col = "green")
#arima.fit <- arima(sales_monthly$электрозавод, order=c(1,0,1), seasonal = c(1,1,0))
#summary(arima.fit)
#arima.forecast <- forecast(arima.fit, 12)
#plot(arima.forecast, type = "l")
#grid()
#lines(fitted(arima.forecast), col = "green")
#В начале рисуем общую информацию по магазину
plot(stl(sales.ts, s.window = "periodic"))
mtext(paste(main_text, ": ", ylab_text, sep=""),side=3,outer=F, cex=1, line=2, adj=0.5)
dates <- as.Date(format(time(as.xts(sales.ts)), "%Y-%m-%d"))
total <- as.numeric(sales.ts)
#общая картина по продажам
plot(dates, total,
main = main_text, sub = NULL, xlab = xlab_text, ylab = ylab_text,
type="l", col=palette()[1])
lines(dates, lowess(total)$y, type="l", lty="dashed", col=palette()[2])
#Добавляем линии для решетки
abline(h = axTicks(2),col="gray", lty="dashed")
abline(v = dates[seq(3, length(dates), 4)],col="gray", lty="dashed")
model <- lm(as.numeric(total) ~ as.numeric(dates))
abline(model, col = "green")
legend("topleft",
c("Real", "Trend line", "lowess"),
col=c("black","green", "red"),
lty=c("solid","solid","dashed"),
lwd=2,
cex=1)
#Custom ARIMA
#sales.monthly <- ts(sales_monthly_zoo[[i]], start=as.numeric(unlist(strsplit(strtrim(start(sales_monthly_zoo[[i]]),7),"-"))), frequency = 12)
#tsdisplay(sales.monthly)
arima.fit <- arima(sales.ts, order=c(1,0,1), seasonal = c(1,1,0))
#summary(arima.fit)
arima.forecast <- forecast(arima.fit, 12)
plot(arima.forecast, type = "l", main = paste("Прогноз:", main_text))
abline(h = axTicks(2), col="gray", lty="dashed")
abline(v = axTicks(1), col="gray", lty="dashed")
#Соединим линией реальные продажи с прогнозными
f.dates <- c(tail(as.numeric(time(sales.ts)), 1), head(as.numeric(time(arima.forecast$mean)), 1))
f.sales <- c(tail(as.numeric(sales.ts), 1), head(as.numeric(arima.forecast$mean), 1))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l")
f.dates <- c(as.numeric(time(sales.ts)), as.numeric(time(arima.forecast$mean)))
f.sales <- c(as.numeric(sales.ts), as.numeric(arima.forecast$mean))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l", lty="dashed", col=palette()[2])
#И добавим линию тренда
model <- lm(as.numeric(f.sales) ~ as.numeric(f.dates))
abline(model, col = "green")
#Добавим линию тренда на продажи + прогноз
legend("topleft",
c("Real", "Trend line", "lowess", "Forecast"),
col=c("black","green", "red", "blue"),
lty=c("solid","solid","dashed", "solid"),
lwd=2,
cex=1)
print(paste(names(shops)[i],": Done!", sep=""))
}
dev.off()
embedFonts("forecasts.pdf")
forecasts <- list()
forecast[[names(shops)[i]]] <- arima.forecast$mean
names(shops)[i]
forecast[[names(shops)[i]]] <- arima.forecast$mean
forecast[[i]] <- arima.forecast$mean
forecast[[i]] <- arima.forecast$mean
forecasts <- list()
forecasts[[names(shops)[i]]] <- arima.forecast$mean
forecasts
for(i in 1:length(shops)) {
print(paste(names(shops)[i],": Start...", sep=""))
main_text <- paste("Магазин", names(sales_monthly)[i])
xlab_text <- "Время"
ylab_text <- "Продажи в рублях"
#Берем группировку по неделям
#cut_weekly <- weekly_windows(sales_daily[[i]], end_date = as.Date(tail(index(sales_daily[[i]]),1)) - days_shift, as_ts = TRUE)
if (length(sales_monthly[[i]]) == 9) {
a <- c(as.numeric(msk_restored), as.numeric(sales_monthly[[i]]))
sales.ts <- ts(a, frequency = 12, start = start.date)
} else {
sales.ts <- sales_monthly[[i]]
}
#Здесь тестируем модели и выбираем подходящую
#auto.arima.fit <- auto.arima(sales_monthly$клин, trace=TRUE,
#parallel=TRUE, num.cores=8,
#max.order=50000,
#ic="aic",
#stationary=FALSE, seasonal=TRUE,
#stepwise=FALSE,
#max.d=3, max.D=3,
#max.P=3, max.Q=3,
#max.p=5, max.q=5)
#auto.arima.forecast <- forecast(auto.arima.fit, 12)
#plot(auto.arima.forecast, type = "l")
#lines(fitted(auto.arima.forecast), col = "green")
#arima.fit <- arima(sales_monthly$электрозавод, order=c(1,0,1), seasonal = c(1,1,0))
#summary(arima.fit)
#arima.forecast <- forecast(arima.fit, 12)
#plot(arima.forecast, type = "l")
#grid()
#lines(fitted(arima.forecast), col = "green")
#В начале рисуем общую информацию по магазину
plot(stl(sales.ts, s.window = "periodic"))
mtext(paste(main_text, ": ", ylab_text, sep=""),side=3,outer=F, cex=1, line=2, adj=0.5)
dates <- as.Date(format(time(as.xts(sales.ts)), "%Y-%m-%d"))
total <- as.numeric(sales.ts)
#общая картина по продажам
plot(dates, total,
main = main_text, sub = NULL, xlab = xlab_text, ylab = ylab_text,
type="l", col=palette()[1])
lines(dates, lowess(total)$y, type="l", lty="dashed", col=palette()[2])
#Добавляем линии для решетки
abline(h = axTicks(2),col="gray", lty="dashed")
abline(v = dates[seq(3, length(dates), 4)],col="gray", lty="dashed")
model <- lm(as.numeric(total) ~ as.numeric(dates))
abline(model, col = "green")
legend("topleft",
c("Real", "Trend line", "lowess"),
col=c("black","green", "red"),
lty=c("solid","solid","dashed"),
lwd=2,
cex=1)
#Custom ARIMA
#sales.monthly <- ts(sales_monthly_zoo[[i]], start=as.numeric(unlist(strsplit(strtrim(start(sales_monthly_zoo[[i]]),7),"-"))), frequency = 12)
#tsdisplay(sales.monthly)
arima.fit <- arima(sales.ts, order=c(1,0,1), seasonal = c(1,1,0))
#summary(arima.fit)
arima.forecast <- forecast(arima.fit, 12)
forecasts[[names(shops)[i]]] <- arima.forecast$mean
plot(arima.forecast, type = "l", main = paste("Прогноз:", main_text))
abline(h = axTicks(2), col="gray", lty="dashed")
abline(v = axTicks(1), col="gray", lty="dashed")
#Соединим линией реальные продажи с прогнозными
f.dates <- c(tail(as.numeric(time(sales.ts)), 1), head(as.numeric(time(arima.forecast$mean)), 1))
f.sales <- c(tail(as.numeric(sales.ts), 1), head(as.numeric(arima.forecast$mean), 1))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l")
f.dates <- c(as.numeric(time(sales.ts)), as.numeric(time(arima.forecast$mean)))
f.sales <- c(as.numeric(sales.ts), as.numeric(arima.forecast$mean))
#Добавим сглаженную линию для продаж + прогноз
lines(f.dates, lowess(f.sales)$y, type="l", lty="dashed", col=palette()[2])
#И добавим линию тренда
model <- lm(as.numeric(f.sales) ~ as.numeric(f.dates))
abline(model, col = "green")
#Добавим линию тренда на продажи + прогноз
legend("topleft",
c("Real", "Trend line", "lowess", "Forecast"),
col=c("black","green", "red", "blue"),
lty=c("solid","solid","dashed", "solid"),
lwd=2,
cex=1)
print(paste(names(shops)[i],": Done!", sep=""))
}
forecasts
unlist(forecasts)
as.data.frame(forecasts)
dimnames(df)[[2]]
dimnames(df)[[1]]
df <- as.data.frame(forecasts)
dimnames(df)
dimnames(df)[[1]]
names(forecasts[[1]])
forecasts[[1]]
as.xts(forecasts[[1]])
time(as.xts(forecasts[[1]]))
format(time(as.xts(forecasts[[1]])), "%Y-%m-%d")
dimnames(df)[[1]] <- format(time(as.xts(forecasts[[1]])), "%Y-%m-%d")
df
write.csv(df, file="forecasts.csv")
df
round(df)
df <- round(as.data.frame(forecasts))
dimnames(df)[[1]] <- format(time(as.xts(forecasts[[1]])), "%Y-%m-%d")
write.csv(df, file="forecasts.csv")
