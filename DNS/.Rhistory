library(X4R)
library(X4R)
library(zoo)
install.packages("zoo")
install.packages("xts")
install.packages("Hmisc")
setwd("D:/GitHub/Repo_R/DNS")
library(zoo)
library(xts)
library(Hmisc)
data <- read.csv("sales2.csv", dec=",", header=TRUE, sep = ";", stringsAsFactors=FALSE, encoding="UTF-8")
#Все будем делать через списки
shops <- list()
#Обработаем сразу информацию по всем магазинам
for (i in seq(1,ncol(data),2)) {
#Выберем все не пустые строки и запомним соответствующие колонки во временную переменную
tmp_shop <- data[is.na(data[,i+1]) == FALSE,c(i,i+1)]
#разобьем информацию по датам на две переменные месяц и день
tmp_shop["month"] <- sapply(1:nrow(tmp_shop), function(i) {
row <- strsplit(tmp_shop[i,1],".", fixed = TRUE)
row[[1]][2]
})
tmp_shop["day"] <- sapply(1:nrow(tmp_shop), function(i) {
row <- strsplit(tmp_shop[i,1],".", fixed = TRUE)
row[[1]][1]
})
#информацию по месяцам сразу превратим в фактор для удобства
tmp_shop["month"] <- factor(tmp_shop$month,
levels=c("янв", "февр", "марта", "апр", "мая", "июня", "июля", "авг", "сент", "окт", "нояб", "дек"))
#Информацию о датам в текстовом виде удалим
tmp_shop[,1] <- NULL
shops[[names(data)[i]]] <- tmp_shop
}
#Добавим реальные даты исходя из того что сейчас 2015 год
#Сразу проставляем номера недель
for(j in 1:length(shops)) {
year <- 2015
month <-  as.numeric(tail(shops[[j]][2],1))
#for(i in nrow(msk_klin):1) {
for(i in nrow(shops[[j]]):1) {
cur_month <-  as.numeric(shops[[j]][i,"month"])
cur_day <-  as.numeric(shops[[j]][i,"day"])
if(cur_month < month) {
month <- cur_month
} else if (cur_month > month) {
month <- cur_month
year <- year - 1
}
shops[[j]][i, "date"] <- paste(year,month,cur_day, sep="-")
week <- format(as.Date(shops[[j]][i, "date"]),"%W")
if (week == "00") {
week <- 52
shops[[j]][i, "week"] <- paste((year-1),week, sep="")
} else {
shops[[j]][i, "week"] <- paste(year,week, sep="")
}
shops[[j]][i, "numofweek"] <- format(as.Date(shops[[j]][i, "date"]), "%W")
}
}
sales_daily <- list()
sales_weekly <- list()
sales_monthly <- list()
weekly_windows <- function(sales_zoo, start_date = NULL, end_date = NULL, as_ts = NULL) {
#Группируем по неделям с суммой
weekly_sum <- apply.weekly(sales_zoo, sum)
print(paste("INPUT: Start date = '", start_date,"', end date = '", end_date,"', length = '", length(weekly_sum), "'", sep = ""))
#Отфильтруем все неполные недели
if (length(weekly_sum) < length(sales_zoo)) {
weekly_length <- apply.weekly(sales_zoo, length)
weekly_full <- weekly_sum[which(weekly_length == 7)]
} else {
weekly_full <- weekly_sum
}
#Если дата начала пропущена, то вычисляем ее, смещаться будем внизу
if (is.null(start_date) == TRUE) {
start_date <- as.Date(start(weekly_full)) - 6
} else {
start_date <- as.Date(start_date)
}
#Корректируем дату, чтобы период начинался с начала новой недели
#day_of_week <- as.numeric(format(start_date, "%u"))
#shift <- (1 %% day_of_week) * (8 - day_of_week)
#start_date <- start_date + shift
#А если пропущена дата окончания, то вычислим ее и поднимемсяц вверх до конца предыдущей недели
if (is.null(end_date)) {
end_date <- as.Date(end(weekly_full))
} else {
end_date <- as.Date(end_date)
}
#Корректируем дату, чтобы период заканчивался в конце недели
#day_of_week <- as.numeric(format(end_date, "%u"))
#shift <- ((day_of_week %% 7) / day_of_week) * day_of_week
#end_date <- end_date - shift
sales <- window(weekly_full, start=start_date, end=end_date)
#ix_start <- max(which(index(sales_zoo) <= start_date))
#ix_end <- min(which(index(sales_zoo) >= end_date))
#ix_weekly <- paste(strtrim(index(sales),4),format(index(sales),"%U"), sep="")
#ix_weekly <- group_index[c(ix_start:ix_end)]
#a <- as.numeric(sales)
#agg_weekly <- aggregate(a, list(ix_weekly), sum)
#start_year <- as.numeric(substr(ix_weekly[1],1,4))
#start_week <- as.numeric(substr(ix_weekly[1],5,6))
#result <- ts(data = sales, start=c(start_year,start_week), frequency = 52)
#result <- sales
if (is.null(as_ts) == FALSE) {
#Запомним номера недель и скорректируем 0ые недели
week_number <- as.numeric(format(index(sales),"%W"))
zero_weeks <- which(week_number == 0)
week_number[zero_weeks] <- week_number[zero_weeks - 1] + 1
start_year <- as.numeric(format(start(sales),"%Y"))
start_week <- week_number[1]
sales <- ts(data = as.numeric(sales), start=c(start_year,start_week), frequency=52)
}
print(paste("CORRECTED: Start date = '", start_date,"', end date = '", end_date,"', length = '", length(sales), "'", sep = ""))
return(sales)
}
shops
head(shops)
i <- 1
sales <- zoo(as.Date(shops[[i]]$X), as.Date(shops[[i]]$date))
sales <- na.fill(merge(sales, zoo(,seq(start(sales),end(sales),by="day")), all=TRUE),0)
sales
aggregate(sales, by="month")
aggregate.zoo(sales, by="month", FUN=sum)
apply.monthly(sales)
apply.monthly(sales, FUN=sum)
start(sales)
end(sales)
install.packages("lubridate")
library(lubridate)
start(sales)
floor_date(start(sales), "month")
end_date <- ceiling_date(end(sales), "month")
end(sales)
ceiling_date(end(sales), "month")
ceiling_date(end(sales), "month") - days(1)
window(sales, start = start_date, end = end_date)
start_date <- floor_date(start(sales), "month")
end_date <- ceiling_date(end(sales), "month") - days(1)
window(sales, start = start_date, end = end_date)
floor_date(start(sales), "month")
ceiling_date_date(start(sales), "month")
ceiling_date(start(sales), "month")
end_date <- floor_date(end(sales), "month")
floor_date(end(sales), "month")
end(sales)
end_date <- floor_date(end(sales), "month") - days()
start_date <- ceiling_date(start(sales), "month")
end_date <- floor_date(end(sales), "month") - days()
window(sales, start = start_date, end = end_date)
cut_sales <- window(sales, start = start_date, end = end_date)
apply.monthly(cut_sales)
apply.monthly(cut_sales, FUN=sum)
sales_monthly_zoo <- apply.monthly(cut_sales, FUN=sum)
sales_monthly_zoo
ts(sales_monthly_zoo)
start_date
strsplit(start_date,sep="-")
strsplit(start_date,"-")
strsplit(as.character(start_date),"-")
unlst(strsplit(as.character(start_date),"-"))
unlist(strsplit(as.character(start_date),"-"))
sales_monthly_ts <- ts(sales_monthly_zoo, start = unlist(strsplit(as.character(start_date),"-")), end = unlist(strsplit(as.character(end_date),"-")))
ts(sales_monthly_zoo, start = unlist(strsplit(as.character(start_date),"-")), end = unlist(strsplit(as.character(end_date),"-")))
ts(sales_monthly_zoo, start = unlist(strsplit(as.character(start_date),"-")), end = unlist(strsplit(as.character(end_date),"-")), frequency = 12)
unlist(strsplit(as.character(start_date),"-"))
unlist(strsplit(as.character(start_date),"-"))[-3]
ts(sales_monthly_zoo,
start = unlist(strsplit(as.character(start_date),"-"))[-3],
end = unlist(strsplit(as.character(end_date),"-"))[-3],
frequency = 12)
ts(sales_monthly_zoo,
start = as.numeric(unlist(strsplit(as.character(start_date),"-"))[-3]),
end = as.numeric(unlist(strsplit(as.character(end_date),"-"))[-3]),
frequency = 12)
sales_monthly_ts <- ts(sales_monthly_zoo,
start = as.numeric(unlist(strsplit(as.character(start_date),"-"))[-3]),
end = as.numeric(unlist(strsplit(as.character(end_date),"-"))[-3]),
frequency = 12)
plot(sales_monthly_ts)
sales_monthly_zoo <- list()
for(i in 1:length(shops)) {
#Ежедневные данные
#И добавляем пустые значения, например первое число каждого года
sales <- zoo(as.Date(shops[[i]]$X), as.Date(shops[[i]]$date))
sales <- na.fill(merge(sales, zoo(,seq(start(sales),end(sales),by="day")), all=TRUE),0)
sales_daily[[names(shops)[i]]] <- sales
a <- as.numeric(sales_daily[[i]])
#еженедельные
sales_weekly[[names(shops)[i]]] <- weekly_windows(sales_daily[[i]])
#ежемесячные
start_date <- ceiling_date(start(sales), "month")
end_date <- floor_date(end(sales), "month") - days()
cut_sales <- window(sales, start = start_date, end = end_date)
sales_monthly_zoo <- apply.monthly(cut_sales, FUN=sum)
sales_monthly_ts <- ts(sales_monthly_zoo,
start = as.numeric(unlist(strsplit(as.character(start_date),"-"))[-3]),
end = as.numeric(unlist(strsplit(as.character(end_date),"-"))[-3]),
frequency = 12)
sales_monthly[[names(shops)[i]]] <- sales_monthly_ts
sales_monthly_zoo[[names(shops)[i]]] <- sales_monthly_zoo
}
sales_monthly_zoo
plot(sales_monthly_zoo)
sales_monthly_zoo <- list()
i
for(i in 1:length(shops)) {
#Ежедневные данные
#И добавляем пустые значения, например первое число каждого года
sales <- zoo(as.Date(shops[[i]]$X), as.Date(shops[[i]]$date))
sales <- na.fill(merge(sales, zoo(,seq(start(sales),end(sales),by="day")), all=TRUE),0)
sales_daily[[names(shops)[i]]] <- sales
a <- as.numeric(sales_daily[[i]])
#еженедельные
sales_weekly[[names(shops)[i]]] <- weekly_windows(sales_daily[[i]])
#ежемесячные
start_date <- ceiling_date(start(sales), "month")
end_date <- floor_date(end(sales), "month") - days()
cut_sales <- window(sales, start = start_date, end = end_date)
sales_zoo <- apply.monthly(cut_sales, FUN=sum)
sales_ts <- ts(sales_zoo,
start = as.numeric(unlist(strsplit(as.character(start_date),"-"))[-3]),
end = as.numeric(unlist(strsplit(as.character(end_date),"-"))[-3]),
frequency = 12)
sales_monthly[[names(shops)[i]]] <- sales_ts
sales_monthly_zoo[[names(shops)[i]]] <- sales_zoo
}
install.packages("tseries")
install.packages("forecast")
library(tseries)
library(forecast)
################################
for (i in 1:length(sales_monthly_zoo)) {
s <- scale(sales_monthly_zoo[[i]])
if (i == 1) {
plot(s, col=palette()[i], main="Нормализованые продажи по всем магазинам", ylab="Продажи", xlab="Время")
} else {
lines(s, col=palette()[i])
}
s <- tail(s, 46)
s <- sqrt(s^2)
print(sum(s))
}
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
cex=1,
)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid")
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid", cex=0.5)
for (i in 1:length(sales_monthly_zoo)) {
s <- scale(sales_monthly_zoo[[i]])
if (i == 1) {
plot(s, col=palette()[i], main="Нормализованые продажи по всем магазинам", ylab="Продажи", xlab="Время")
} else {
lines(s, col=palette()[i])
}
s <- tail(s, 46)
s <- sqrt(s^2)
print(sum(s))
}
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid", cex=0.5)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid", cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
text.width = 10
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
text.width = 10,
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
text.width = 30,
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
text.width = 100,
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid", inset=10,
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid", inset=100,
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid", inset=100,
x.intersp = 0.5
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid", inset=100,
x.intersp = 0.5,
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
x.intersp = 1.5,
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
y.intersp = 1.5,
cex=0.75)
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
y.intersp = 0.5,
cex=0.75)
for (i in 1:length(sales_monthly_zoo)) {
s <- scale(sales_monthly_zoo[[i]])
if (i == 1) {
plot(s, col=palette()[i], main="Нормализованые продажи по всем магазинам", ylab="Продажи", xlab="Время")
} else {
lines(s, col=palette()[i])
}
s <- tail(s, 46)
s <- sqrt(s^2)
print(sum(s))
}
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
y.intersp = 0.5,
cex=0.75)
for(i in 1:length(shops)) {
plot(sales_daily[[i]], main = names(shops)[i], cex=1, xlab=NA, ylab="Продажи (тыс.р)", type="l", col="gray", las=2)
# Добавляем линию тренда
model <- lm(as.numeric(sales_monthly_zoo[[i]]) ~ index(sales_monthly_zoo[[i]]))
abline(model, col = "green")
#Добавляем сглаженную ЛР для данных о продажах
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, as.Date(shops[[i]]$date)), col="red")
#И описание диаграммы
legend("topleft", c("Продажи", "Тренд", "Сглаженные"),
col=c("gray","green","red"),
lty=c("solid","solid","solid"),
cex=1)
#в случае если у нас есть 2а года продаж и больше добавляем дополнительную информацию
if (length(sales_monthly_zoo[[i]]) >= 104) {
plot(stl(sales_monthly_zoo, s.window = "periodic"))
}
}
for(i in 1:length(shops)) {
plot(sales_monthly_zoo[[i]], main = names(shops)[i], cex=1, xlab=NA, ylab="Продажи (тыс.р)", type="l", col="gray", las=2)
# Добавляем линию тренда
model <- lm(as.numeric(sales_monthly_zoo[[i]]) ~ index(sales_monthly_zoo[[i]]))
abline(model, col = "green")
#Добавляем сглаженную ЛР для данных о продажах
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, as.Date(shops[[i]]$date)), col="red")
#И описание диаграммы
legend("topleft", c("Продажи", "Тренд", "Сглаженные"),
col=c("gray","green","red"),
lty=c("solid","solid","solid"),
cex=1)
#в случае если у нас есть 2а года продаж и больше добавляем дополнительную информацию
if (length(sales_monthly_zoo[[i]]) >= 104) {
plot(stl(sales_monthly_zoo, s.window = "periodic"))
}
}
dev.off()
for(i in 1:length(shops)) {
plot(sales_monthly_zoo[[i]], main = names(shops)[i], cex=1, xlab=NA, ylab="Продажи (тыс.р)", type="l", col="gray", las=2)
# Добавляем линию тренда
model <- lm(as.numeric(sales_monthly_zoo[[i]]) ~ index(sales_monthly_zoo[[i]]))
abline(model, col = "green")
#Добавляем сглаженную ЛР для данных о продажах
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, as.Date(shops[[i]]$date)), col="red")
#И описание диаграммы
legend("topleft", c("Продажи", "Тренд", "Сглаженные"),
col=c("gray","green","red"),
lty=c("solid","solid","solid"),
cex=1)
#в случае если у нас есть 2а года продаж и больше добавляем дополнительную информацию
if (length(sales_monthly_zoo[[i]]) >= 104) {
plot(stl(sales_monthly_zoo, s.window = "periodic"))
}
}
i <- 1
plot(sales_monthly_zoo[[i]], main = names(shops)[i], cex=1, xlab=NA, ylab="Продажи (тыс.р)", type="l", col="gray", las=2)
model <- lm(as.numeric(sales_monthly_zoo[[i]]) ~ index(sales_monthly_zoo[[i]]))
abline(model, col = "green")
lowess(sales_monthly_zoo[[i]])
index(sales_monthly_zoo[[i]])
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, index(sales_monthly_zoo[[i]]), col="red")
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, index(sales_monthly_zoo[[i]])), col="red")
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, index(sales_monthly_zoo[[i]])), col="red")
legend("topleft", c("Продажи", "Тренд", "Сглаженные"),
col=c("gray","green","red"),
lty=c("solid","solid","solid"),
cex=1)
#в случае если у нас есть 2а года продаж и больше добавляем дополнительную информацию
if (length(sales_monthly_zoo[[i]]) >= 104) {
plot(stl(sales_monthly_zoo, s.window = "periodic"))
}
if (length(sales_monthly_zoo[[i]]) >= 24) {
plot(stl(sales_monthly_zoo, s.window = "periodic"))
}
if (length(sales_monthly_zoo[[i]]) >= 24) {
plot(stl(sales_monthly_ts[[i]], s.window = "periodic"))
}
sales_monthly_ts[[i]]
sales_monthly_ts
if (length(sales_monthly_zoo[[i]]) >= 24) {
plot(stl(sales_monthly[[i]], s.window = "periodic"))
}
opar <- par(no.readonly=TRUE)
pdf("observed_monthly.pdf", encoding = "CP1251.enc")
#Нормализуем все продажи и выводим на экран
for (i in 1:length(sales_monthly_zoo)) {
s <- scale(sales_monthly_zoo[[i]])
if (i == 1) {
plot(s, col=palette()[i], main="Нормализованые продажи по всем магазинам", ylab="Продажи", xlab="Время")
} else {
lines(s, col=palette()[i])
}
s <- tail(s, 46)
s <- sqrt(s^2)
print(sum(s))
}
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
y.intersp = 0.5,
cex=0.75)
#И выводим общие данные
i <- 1
for(i in 1:length(shops)) {
plot(sales_monthly_zoo[[i]], main = names(shops)[i], cex=1, xlab=NA, ylab="Продажи (тыс.р)", type="l", col="gray", las=2)
# Добавляем линию тренда
model <- lm(as.numeric(sales_monthly_zoo[[i]]) ~ index(sales_monthly_zoo[[i]]))
abline(model, col = "green")
#Добавляем сглаженную ЛР для данных о продажах
lines(zoo(lowess(sales_monthly_zoo[[i]])$y, index(sales_monthly_zoo[[i]])), col="red")
#И описание диаграммы
legend("topleft", c("Продажи", "Тренд", "Сглаженные"),
col=c("gray","green","red"),
lty=c("solid","solid","solid"),
cex=1)
#в случае если у нас есть 2а года продаж и больше добавляем дополнительную информацию
if (length(sales_monthly_zoo[[i]]) >= 24) {
plot(stl(sales_monthly[[i]], s.window = "periodic"))
}
}
dev.off()
pdf("observed_monthly.pdf", family="NimbusSan", encoding = "CP1251.enc")
for (i in 1:length(sales_monthly_zoo)) {
s <- scale(sales_monthly_zoo[[i]])
if (i == 1) {
plot(s, col=palette()[i], main="Нормализованые продажи по всем магазинам", ylab="Продажи", xlab="Время")
} else {
lines(s, col=palette()[i])
}
s <- tail(s, 46)
s <- sqrt(s^2)
print(sum(s))
}
legend("topleft", names(shops),
col=palette()[c(1:6)],
lty="solid",
cex=0.75)
dev.off()
embedFonts("observed_monthly.pdf")
embedFonts("observed_monthly.pdf", fontpaths = "C:/Program Files (x86)/gs/fonts/")
embedFonts("observed_monthly.pdf", options="-sFONTPATH=C:/Program Files (x86)/gs/fonts/")
embedFonts("observed_monthly.pdf")
embedFonts("observed_monthly.pdf")
