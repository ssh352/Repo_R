library(RODBC)
library(plyr)
con <- odbcDriverConnect("driver={SQL Server};server=plumbum.ural.ocs.ru;database=twitter;trusted_connection=true")
install.packages("RODBC")
install.packages("plyr")
library(RODBC)
library(plyr)
con <- odbcDriverConnect("driver={SQL Server};server=plumbum.ural.ocs.ru;database=twitter;trusted_connection=true")
con <- odbcDriverConnect("driver={SQL Server};server=plumbum.ural.ocs.ru;database=twitter;uid=sa;pwd=107109")
#con <- odbcDriverConnect("driver={SQL Server};server=cisrepl-v.ocs.ru;database=cisco;uid=reader;pwd=xbnfntkm")
#con <- odbcConnect("CISREPL", uid='reader', pwd='xbnfntkm')
res <- sqlQuery(con, 'SELECT * FROM tweets')
is.data.frame(res)
names(res)
res <- sqlQuery(con, 'SELECT [date]
,[score]
,[joy]
,[surprise]
,[sadness]
,[disgust]
,[fear]
,[anger]
FROM [twitter].[dbo].[tweets_score] AS sc
LEFT JOIN [twitter].[dbo].[tweets] AS tw ON sc.tweetid = tw.tweetid')
names(res)
aggregate(x = res$score, FUN = sum, by = list(Group.date = res$date))
res$date[1]
substr(res$date[1],1,4)
substr(res$date[1],1,7)
aggregate(x = res$score, FUN = sum, by = list(Group.date = substr(res$date[1],1,7)))
aggregate(x = res$score, FUN = sum, by = substr(res$date[1],1,7))
aggregate(x = res$score, FUN = sum, by = list(substr(res$date,1,7))
)
aggregate(x = res$score, FUN = sum, by = list(substr(res$date,1,10)))
aggregate(x = c(res$score,res$joy,res$surprise,res$sadness,res$disgust,res$fear,res$anger), FUN = sum, by = list(substr(res$date,1,10)))
aggregate(x = res[c(res$score,res$joy,res$surprise,res$sadness,res$disgust,res$fear,res$anger)], FUN = sum, by = list(substr(res$date,1,10)))
aggregate(x = res[c("score","joy","surprise","sadness","disgust","fear","anger")], FUN = sum, by = list(substr(res$date,1,10)))
names(res)
score <- aggregate(x = res[c("score","joy","surprise","sadness","disgust","fear","anger")], FUN = sum, by = list(substr(res$date,1,10)))
library(ggplot2)
library(reshape)
install.packages("ggplot2\")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("reshape")
Molten <- melt(data, id.vars = "date")
library(ggplot2)
library(reshape)
Molten <- melt(data, id.vars = "date")
ggplot(Molten, aes(x = date, y = value, colour = variable)) + geom_line()
Molten <- melt(score, id.vars = "date")
score <- aggregate(x = res[c("score","joy","surprise","sadness","disgust","fear","anger")], FUN = sum, by = list(date=substr(res$date,1,10)))
score <- aggregate(x = res[c("score","joy","surprise","sadness","disgust","fear","anger")], FUN = sum, by = list(gdate=substr(res$date,1,10)))
score <- aggregate(x = res[c("score","joy","surprise","sadness","disgust","fear","anger")], FUN = sum, by = list(substr(res$date,1,10)))
score <- aggregate(x = res[c("score","joy","surprise","sadness","disgust","fear","anger")], FUN = sum, by = list(Group.date = substr(res$date,1,10)))
Molten <- melt(score, id.vars = "Group.date")
ggplot(Molten, aes(x = Group.date, y = value, colour = variable)) + geom_line()
data <- data.frame(time = seq(0, 23), noob = rnorm(24), plus = runif(24), extra = rpois(24, lambda = 1))
Molten <- melt(data, id.vars = "time")
ggplot(Molten, aes(x = time, y = value, colour = variable)) + geom_line()
Molten <- melt(score, id.vars = "Group.date")
ggplot(Molten, aes(x = Group.date, y = value, colour = variable)) + geom_line()
plot(score$Group.date, score$score)
plot(score$score)
lines(score$joy)
lines(score$joy,ylim=[-1000,1000])
plot(score$score,ylim=[-1000,1000])
plot(score$score,ylim=c(-1000,1000())
0
plot(score$score,ylim=c(-1000,1000))
plot(score$score,ylim=c(-1000,1000),type="1")
plot(score$score,ylim=c(-1000,1000),type="l")
plot(score$score,ylim=c(-1000,1000),type="p")
plot(score$score,ylim=c(-1000,1000),type="b")
plot(score$score,ylim=c(-1000,1000),type="o")
plot(score$score,ylim=c(-1000,1000),type="o",colors="green")
plot(score$score,ylim=c(-1000,1000),type="o",col="green")
plot(score$score,ylim=c(-1000,1000),type="o",col="g")
plot(score$score,ylim=c(-1000,1000),type="o",col="1")
plot(score$score,ylim=c(-1000,1000),type="o",col="2")
plot(score$score,ylim=c(-1000,1000),type="o",col="1")
plot(ylim=c(-1000,1000))
Molten$variable
factor(Molten$variable)
score[,2]
score[,1]
score[,2]
score[,3]
plot(score$score,ylim=c(-1000,1000),type="o",col="2")
for (f in c(2:7)) {
lines(score[,f],type="o", col=f+1
}
for (f in c(2:7)) {
lines(score[,f],type="o", col=f+1)
}
plot(score$score,ylim=c(-1000,1000),type="l",col="2")
for (f in c(2:7)) {
lines(score[,f],type="l", col=f+1)
}
plot(score$score,ylim=c(-100,100),type="l",col="2")
for (f in c(2:7)) {
lines(score[,f],type="l", col=f+1)
}
plot(0,0,ylim=c(-100,100),type="l",col="2")
for (f in c(1:7)) {
lines(score[,f],type="l", col=f)
}
length(score)
length(score,2)
nrow(score)
nrows(score)
plot(0,0,xlim=c(0,nrow(score)),ylim=c(-100,100),type="l",col="2")
for (f in c(1:7)) {
lines(score[,f],type="l", col=f)
}
names(score)
names(score)[2:8]
legend("topleft",names(score)[2:8])
legend("topleft",names(score)[2:8],col=c(1:7),lty=c(1,1))
grid()
plot(0,0,xlim=c(0,nrow(score)),ylim=c(-100,100),type="l",col="2")
for (f in c(1,2,3)) {
lines(score[,f],type="l", col=f)
}
legend("topleft",names(score)[2,3,8],col=c(1,2,3),lty=c(1,1))
names(score)[2,3,8]
names(score)[c(2,3,8)]
legend("topleft",names(score)[c(2,3,8)],col=c(1,2,3),lty=c(1,1))
plot(0,0,xlim=c(0,nrow(score)),ylim=c(-100,100),type="l",col="2")
for (f in c(2,3,4)) {
lines(score[,f],type="l", col=f)
}
legend("topleft",names(score)[c(2,3,8)],col=c(1,2,3),lty=c(1,1))
legend("topleft",names(score)[c(2,3,8)],col=c(2,3,4),lty=c(1,1))
legend("topleft",names(score)[c(2,3,4)],col=c(2,3,4),lty=c(1,1))
ts(score$score, start=c(2014, 10,22), frequency=12)
ts(score$score, start=c(2014, 10,22), frequency=30)
ts(score$score, start=c(2014, 10,22))
score$Group.date
as.character.POSIXt(score$Group.date)
as.date.POSIXt(score$Group.date)
as.date(score$Group.date)
library(date)
library(Date)
install.packages("Date")
install.packages("date")
library(date)
as.date(score$Group.date)
as.Date(score$Group.date)
plot(as.Date(score$Group.date),0,xlim=c(0,nrow(score)),ylim=c(-100,100),type="l",col="2")
plot(as.Date(score$Group.date),1,xlim=c(0,nrow(score)),ylim=c(-100,100),type="l",col="2")
plot(0,0,xlim=c(0,nrow(score)),ylim=c(-100,100),type="l",col="2")
for (f in c(2,3,4)) {
lines(as.Date(score$Group.date),score[,f],type="l", col=f)
}
min(as.Date(score$Group.date))
plot(0,0,xlim=c(min(as.Date(score$Group.date)),max(as.Date(score$Group.date))),ylim=c(-100,100),type="l",col="2")
for (f in c(2,3,4)) {
lines(as.Date(score$Group.date),score[,f],type="l", col=f)
}
plot(as.Date(score$Group.date),score[,2],xlim=c(min(as.Date(score$Group.date)),max(as.Date(score$Group.date))),ylim=c(-100,100),type="l",col="2")
for (f in c(2,3,4)) {
lines(as.Date(score$Group.date),score[,f],type="l", col=f)
}
legend("topleft",names(score)[c(2,3,4)],col=c(2,3,4),lty=c(1,1))
plot(as.Date(score$Group.date),score[,2],xlim=c(min(as.Date(score$Group.date)),max(as.Date(score$Group.date))),
ylim=c(-100,100),type="l",col="2", xlab="Date", ylab="Score")
for (f in c(2,3,4)) {
lines(as.Date(score$Group.date),score[,f],type="l", col=f)
}
legend("topleft",names(score)[c(2,3,4)],col=c(2,3,4),lty=c(1,1))
plot(as.Date(score$Group.date),score[,2],xlim=c(min(as.Date(score$Group.date)),max(as.Date(score$Group.date))),
ylim=c(-100,100),type="l",col="2", xlab="Date", ylab="Score")
for (f in c(2,5:8)) {
lines(as.Date(score$Group.date),score[,f],type="l", col=f)
}
legend("topleft",names(score)[c(2,5:8)],col=c(1:4),lty=c(1,1))
legend("topleft",names(score)[c(2,5:8)],col=c(1:5),lty=c(1,1))
legend("topleft",names(score)[c(2,5:8)],col=c(2,5:8),lty=c(1,1))
score
setwd("D:/GitHub/R_project/DNS")
grid()
grid()
score$score
plot(decomposite(score$score))
plot(decompose(score$score))
ts(score$score, start=(2014,10,22), frequency = 7)
ts(score$score, start=c(2014,10,22), frequency = 7)
install.packages("XLConnect")
setwd("D:/GitHub/R_project/R_OCS")
library(XLConnect)\
library(XLConnect)
library(XLConnect)
R.Version
R.Version()
load("D:/GitHub/R_project/Rooms_LR/.RData")
df <- data.frame()
for (i in 1:length(all_opt)) {
cat(sprintf("Extract values = %d\n", i))
if (length(all_opt[[i]]) > 0) {
for (j in 1:length(all_opt[[i]])){
if (nrow(all_opt[[i]][[j]]) > 1) df[i,all_opt[[i]][[j]][1,2]] <- all_opt[[i]][[j]][2,2]
}
}
}
df[1:10,]
is.na[df[,"Цена:"]]
is.na(df[,"Цена:"])
df[is.na(df[,"Цена:"]),]
dfc <- df[is.na(df[,"Цена:"]),]
fix(dfc)
df[1:10,]
if (T && T) {print("Done")}
if (F && T) {print("Done")}
df <- data.frame()
for (i in 1:length(all_opt)) {
cat(sprintf("Extract values = %d\n", i))
if (length(all_opt[[i]]) > 0) {
for (j in 1:length(all_opt[[i]])){
if (nrow(all_opt[[i]][[j]]) > 1 && all_opt[[i]][[j]][1,2] != "Комната:") df[i,all_opt[[i]][[j]][1,2]] <- all_opt[[i]][[j]][2,2]
}
}
}
df[1:10,]
df <- data.frame()
for (i in 1:length(all_opt)) {
cat(sprintf("Extract values = %d\n", i))
if (length(all_opt[[i]]) > 0) {
for (j in 1:length(all_opt[[i]])){
if (nrow(all_opt[[i]][[j]]) > 1 && all_opt[[i]][[j]][1,2] != "Комната") df[i,all_opt[[i]][[j]][1,2]] <- all_opt[[i]][[j]][2,2]
}
}
}
df <- data.frame()
for (i in 1:length(all_opt)) {
cat(sprintf("Extract values = %d\n", i))
if (length(all_opt[[i]]) > 0) {
for (j in 1:length(all_opt[[i]])){
if (nrow(all_opt[[i]][[j]]) > 1 && all_opt[[i]][[j]][2,2] != "Комната") df[i,all_opt[[i]][[j]][1,2]] <- all_opt[[i]][[j]][2,2]
}
}
}
df[1:10,]
df[is.na(df[,"Цена"])==TRUE]
df[is.na(df[,"Цена:"])==TRUE]
df[,"ЦенаЖ"]
df[,"Цена:"]
is.na(df[,"Цена:"])
is.na(df[,"Цена:"]) == TRUE
whish(is.na(df[,"Цена:"]) == TRUE)
which(is.na(df[,"Цена:"]) == TRUE)
which(is.na(df[,"Цена:"]) != TRUE)
df[which(is.na(df[,"Цена:"]) != TRUE),]
dfc <- df[which(is.na(df[,"Цена:"]) != TRUE),]
dfc
dfc[1:10,]
df[which(is.na(df[,"Цена:"]) != TRUE) && df[,"Объект:"] == "Квартира",]
df[,"Объект:"]
names(df)
df[,"Цена:"]
df[,"Объект:"]
df[,"Обьект:"]
trim
df[which(is.na(df[,"Цена:"]) != TRUE) && df[,"Обьект:"] == "Квартира ",]
df[which(is.na(df[,"Цена:"]) != TRUE) || df[,"Обьект:"] == "Квартира ",]
dfc <- df[which(is.na(df[,"Цена:"]) != TRUE) || df[,"Обьект:"] == "Квартира ",]
dfc[1:10,]
dfc <- df[df[,"Обьект:"] == "Квартира ",]
dfc
dfc[1:10,]
dfc <- df[which(df[,"Обьект:"] == "Квартира "),]
dfc[1:10,]
dfc <- df[which((is.na(df[,"Цена:"]) != TRUE) && (df[,"Обьект:"] == "Квартира ")),]
dfc <- df[which((df[,"Обьект:"] == "Квартира ")),]
dfc <- df[which((is.na(df[,"Цена:"]) != TRUE) && (df[,"Обьект:"] == "Квартира ")),]
(is.na(df[,"Цена:"]) != TRUE) && (df[,"Обьект:"] == "Квартира ")
dfc <- df[which(df[,"Обьект:"] == "Квартира "),]
dfc <- dfc[which(is.na(dfc[,"Цена:"]) != TRUE),]
dfc[1:10,]
dfc[,"Балкон"]
dfc[,"Балкон:"]
as.factor(dfc[,"Балкон:"])
